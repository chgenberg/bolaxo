// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  role            String    // seller, buyer, broker, admin
  verified        Boolean   @default(false)
  bankIdVerified  Boolean   @default(false)
  
  // Profile data
  phone           String?
  companyName     String?
  orgNumber       String?
  region          String?
  
  // Referral system
  referralCode    String?   @unique
  referredBy      String?
  
  // Magic link tokens
  magicLinkToken  String?   @unique
  tokenExpiresAt  DateTime?
  
  // Admin password authentication (optional, only for admin users)
  passwordHash    String?   // bcrypt hashed password for admin login
  
  // Timestamps
  createdAt       DateTime  @default(now())
  lastLoginAt     DateTime?
  
  // Relations
  valuations      Valuation[]
  listings        Listing[]
  buyerProfile    BuyerProfile?
  
  @@index([email])
  @@index([magicLinkToken])
  @@index([referralCode])
}

model Valuation {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  
  // User relation
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  
  email        String?
  companyName  String?
  industry     String?
  inputJson    Json
  resultJson   Json
  mostLikely   Int
  minValue     Int
  maxValue     Int
  
  @@index([userId])
  @@index([email])
}

model Listing {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Company Info
  companyName     String?
  anonymousTitle  String   // User-editable anonymous title
  type            String   @default("Icke specifierad") // Restaurang, E-handel, etc
  category        String?  // More specific category
  industry        String
  orgNumber       String?
  website         String?
  
  // Location
  location        String   // City
  region          String   @default("Okänd region") // Full region string
  address         String?  // Full address (NDA-locked)
  
  // Financials
  revenue         Int      @default(0) // Revenue in SEK
  revenueRange    String   @default("Okänd") // e.g. "5-10 MSEK"
  priceMin        Int      @default(0) // Min price in SEK
  priceMax        Int      @default(0) // Max price in SEK
  ebitda          Int?     // EBITDA in SEK
  employees       Int      @default(0) // Number of employees
  foundedYear     Int?
  
  // Description & Qualitative
  description     String   @default("") @db.Text
  strengths       String[] // Array of 3 strengths
  risks           String[] // Array of 3 risks
  whySelling      String?  @db.Text // Why selling
  whatIncluded    String?  @db.Text // What's included in sale
  
  // Media
  image           String?  // Path to main image
  images          String[] // Array of image paths
  
  // Metadata
  views           Int      @default(0)
  verified        Boolean  @default(false)
  isNew           Boolean  @default(true)
  broker          Boolean  @default(false)
  
  // Status & Package
  status          String   @default("draft") // draft, active, sold, paused
  packageType     String   @default("basic") // free, basic, pro, pro_plus
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  publishedAt     DateTime?
  expiresAt       DateTime?
  
  @@index([userId])
  @@index([status])
  @@index([industry])
  @@index([location])
}

model CompanyCache {
  id              String   @id @default(cuid())
  orgNumber       String?  @unique
  websiteUrl      String?  @unique
  enrichedData    Json
  scrapedPages    Int      @default(0)
  createdAt       DateTime @default(now())
  expiresAt       DateTime
}

model Transaction {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  listingId       String
  buyerId         String
  sellerId        String
  advisorId       String?
  
  // Deal data
  stage           String    @default("LOI_SIGNED") // LOI_SIGNED, DD_IN_PROGRESS, SPA_NEGOTIATION, CLOSING, COMPLETED, CANCELLED
  agreedPrice     Int       // i SEK
  closingDate     DateTime?
  
  // Metadata
  notes           String?
  
  // Sub-relations
  documents       Document[]
  milestones      Milestone[]
  payments        Payment[]
  activities      Activity[]
  
  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([stage])
}

model Document {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  type            String      // SPA, LOI, DD_REPORT, FINANCIALS, INVOICE, CONTRACT, OTHER
  title           String
  fileName        String?
  fileUrl         String?
  fileSize        Int?
  mimeType        String?
  
  status          String      @default("DRAFT") // DRAFT, PENDING_SIGNATURE, SIGNED, ARCHIVED
  
  uploadedBy      String
  uploadedByName  String
  
  createdAt       DateTime    @default(now())
  signedAt        DateTime?
  
  @@index([transactionId])
  @@index([type])
}

model Milestone {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  dueDate         DateTime
  
  completed       Boolean     @default(false)
  completedAt     DateTime?
  completedBy     String?
  
  assignedTo      String?
  assignedToName  String?
  
  order           Int         // För sortering
  isRequired      Boolean     @default(true)
  
  createdAt       DateTime    @default(now())
  
  @@index([transactionId])
  @@index([completed])
}

model Payment {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  amount          Int         // i SEK
  type            String      // DEPOSIT, MAIN_PAYMENT, EARN_OUT, FEE
  description     String?
  
  status          String      @default("PENDING") // PENDING, ESCROWED, RELEASED, REFUNDED
  
  dueDate         DateTime?
  paidAt          DateTime?
  releasedAt      DateTime?
  
  createdAt       DateTime    @default(now())
  
  @@index([transactionId])
  @@index([status])
}

model Activity {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  type            String      // STAGE_CHANGE, DOCUMENT_UPLOADED, MILESTONE_COMPLETED, NOTE_ADDED, PAYMENT_MADE
  title           String
  description     String?
  
  actorId         String
  actorName       String
  actorRole       String      // buyer, seller, advisor
  
  metadata        Json?       // Extra data om behövs
  
  createdAt       DateTime    @default(now())
  
  @@index([transactionId])
  @@index([createdAt])
}

model TeamMember {
  id              String      @id @default(cuid())
  transactionId   String
  
  userId          String?     // Om registrerad användare
  email           String
  name            String
  role            String      // advisor, accountant, lawyer, other
  permissions     Json        // { canViewDocuments: true, canEditMilestones: false, ... }
  
  invitedBy       String
  invitedAt       DateTime    @default(now())
  acceptedAt      DateTime?
  
  status          String      @default("PENDING") // PENDING, ACCEPTED, DECLINED
  
  @@index([transactionId])
  @@index([email])
  @@index([status])
}

model BuyerProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Region preferences
  preferredRegions      String[]  // Array of regions: Stockholm, Göteborg, etc or "Hela Sverige"
  
  // Industry preferences  
  preferredIndustries   String[]  // Array of industries including custom ones
  
  // Financial criteria
  revenueMin            Int?      // Min omsättning i SEK
  revenueMax            Int?      // Max omsättning i SEK
  ebitdaMin             Int?      // Min EBITDA i SEK
  ebitdaMax             Int?      // Max EBITDA i SEK
  priceMin              Int?      // Min pris i SEK
  priceMax              Int?      // Max pris i SEK
  
  // Investment type
  investmentType        String?   // full_acquisition, partnership, equity_stake, turnaround
  profitabilityPreference String? // profitable, turnaround, either
  
  // Buyer information
  buyerType             String?   // individual, company, private_equity, strategic
  investmentExperience  String?   // first_time, experienced, professional
  financingReady        Boolean   @default(false)
  timeframe             String?   // immediate, 3_months, 6_months, 12_months
  
  // Additional preferences
  employeeCountMin      Int?      // Min antal anställda
  employeeCountMax      Int?      // Max antal anställda
  companyAgeMin         Int?      // Min företagsålder i år
  ownerInvolvement      String?   // active, passive, either
  
  // Free text preferences
  additionalCriteria    String?   // Fri text för extra kriterier
  dealBreakers          String?   // Vad är absoluta nej
  
  // Notification preferences
  emailAlerts           Boolean   @default(true)
  smsAlerts             Boolean   @default(false)
  alertFrequency        String    @default("daily") // instant, daily, weekly
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastSearchAt          DateTime?
  
  @@index([userId])
}

model NDARequest {
  id              String   @id @default(cuid())
  listingId       String
  buyerId         String
  sellerId        String
  
  status          String   @default("pending") // pending, approved, rejected
  message         String?  @db.Text
  buyerProfile    Json?    // Snapshot of buyer info at time of request
  
  approvedAt      DateTime?
  rejectedAt      DateTime?
  viewedAt        DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
}

model Message {
  id              String   @id @default(cuid())
  listingId       String
  senderId        String
  recipientId     String
  
  subject         String?
  content         String   @db.Text
  read            Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  
  @@index([listingId])
  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
}

model SavedListing {
  id              String   @id @default(cuid())
  userId          String
  listingId       String
  notes           String?  @db.Text
  
  createdAt       DateTime @default(now())
  
  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}
