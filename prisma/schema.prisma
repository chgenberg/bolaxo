// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  role            String    // seller, buyer, broker
  verified        Boolean   @default(false)
  bankIdVerified  Boolean   @default(false)
  
  // Profile data
  phone           String?
  companyName     String?
  orgNumber       String?
  region          String?
  
  // Referral system
  referralCode    String?   @unique
  referredBy      String?
  
  // Magic link tokens
  magicLinkToken  String?   @unique
  tokenExpiresAt  DateTime?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  lastLoginAt     DateTime?
  
  // Relations
  valuations      Valuation[]
  listings        Listing[]
  
  @@index([email])
  @@index([magicLinkToken])
  @@index([referralCode])
}

model Valuation {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  
  // User relation
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  
  email        String?
  companyName  String?
  industry     String?
  inputJson    Json
  resultJson   Json
  mostLikely   Int
  minValue     Int
  maxValue     Int
  
  @@index([userId])
  @@index([email])
}

model Listing {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  companyName     String?
  anonymousTitle  String
  industry        String
  revenue         String
  employees       String
  location        String
  
  status          String   @default("draft") // draft, active, sold, paused
  packageType     String   // basic, featured, premium
  
  createdAt       DateTime @default(now())
  publishedAt     DateTime?
  expiresAt       DateTime?
  
  @@index([userId])
  @@index([status])
}

model CompanyCache {
  id              String   @id @default(cuid())
  orgNumber       String?  @unique
  websiteUrl      String?  @unique
  enrichedData    Json
  scrapedPages    Int      @default(0)
  createdAt       DateTime @default(now())
  expiresAt       DateTime
}

model Transaction {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  listingId       String
  buyerId         String
  sellerId        String
  advisorId       String?
  
  // Deal data
  stage           String    @default("LOI_SIGNED") // LOI_SIGNED, DD_IN_PROGRESS, SPA_NEGOTIATION, CLOSING, COMPLETED, CANCELLED
  agreedPrice     Int       // i SEK
  closingDate     DateTime?
  
  // Metadata
  notes           String?
  
  // Sub-relations
  documents       Document[]
  milestones      Milestone[]
  payments        Payment[]
  activities      Activity[]
  
  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([stage])
}

model Document {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  type            String      // SPA, LOI, DD_REPORT, FINANCIALS, INVOICE, CONTRACT, OTHER
  title           String
  fileName        String?
  fileUrl         String?
  fileSize        Int?
  mimeType        String?
  
  status          String      @default("DRAFT") // DRAFT, PENDING_SIGNATURE, SIGNED, ARCHIVED
  
  uploadedBy      String
  uploadedByName  String
  
  createdAt       DateTime    @default(now())
  signedAt        DateTime?
  
  @@index([transactionId])
  @@index([type])
}

model Milestone {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  dueDate         DateTime
  
  completed       Boolean     @default(false)
  completedAt     DateTime?
  completedBy     String?
  
  assignedTo      String?
  assignedToName  String?
  
  order           Int         // För sortering
  isRequired      Boolean     @default(true)
  
  createdAt       DateTime    @default(now())
  
  @@index([transactionId])
  @@index([completed])
}

model Payment {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  amount          Int         // i SEK
  type            String      // DEPOSIT, MAIN_PAYMENT, EARN_OUT, FEE
  description     String?
  
  status          String      @default("PENDING") // PENDING, ESCROWED, RELEASED, REFUNDED
  
  dueDate         DateTime?
  paidAt          DateTime?
  releasedAt      DateTime?
  
  createdAt       DateTime    @default(now())
  
  @@index([transactionId])
  @@index([status])
}

model Activity {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  type            String      // STAGE_CHANGE, DOCUMENT_UPLOADED, MILESTONE_COMPLETED, NOTE_ADDED, PAYMENT_MADE
  title           String
  description     String?
  
  actorId         String
  actorName       String
  actorRole       String      // buyer, seller, advisor
  
  metadata        Json?       // Extra data om behövs
  
  createdAt       DateTime    @default(now())
  
  @@index([transactionId])
  @@index([createdAt])
}

model TeamMember {
  id              String      @id @default(cuid())
  transactionId   String
  
  userId          String?     // Om registrerad användare
  email           String
  name            String
  role            String      // advisor, accountant, lawyer, other
  permissions     Json        // { canViewDocuments: true, canEditMilestones: false, ... }
  
  invitedBy       String
  invitedAt       DateTime    @default(now())
  acceptedAt      DateTime?
  
  status          String      @default("PENDING") // PENDING, ACCEPTED, DECLINED
  
  @@index([transactionId])
  @@index([email])
  @@index([status])
}
